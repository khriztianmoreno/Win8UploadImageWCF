//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 11.0.50727.1
// 
namespace UploadFile.Proxy {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PictureFile", Namespace="http://schemas.datacontract.org/2004/07/UploadFile.Web")]
    public partial class PictureFile : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string PictureNameField;
        
        private byte[] PictureStreamField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PictureName {
            get {
                return this.PictureNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureNameField, value) != true)) {
                    this.PictureNameField = value;
                    this.RaisePropertyChanged("PictureName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] PictureStream {
            get {
                return this.PictureStreamField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureStreamField, value) != true)) {
                    this.PictureStreamField = value;
                    this.RaisePropertyChanged("PictureStream");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Proxy.IPictureService")]
    public interface IPictureService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPictureService/Upload", ReplyAction="http://tempuri.org/IPictureService/UploadResponse")]
        System.Threading.Tasks.Task<bool> UploadAsync(UploadFile.Proxy.PictureFile picture);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPictureService/Download", ReplyAction="http://tempuri.org/IPictureService/DownloadResponse")]
        System.Threading.Tasks.Task<UploadFile.Proxy.PictureFile> DownloadAsync(string pictureName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPictureServiceChannel : UploadFile.Proxy.IPictureService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PictureServiceClient : System.ServiceModel.ClientBase<UploadFile.Proxy.IPictureService>, UploadFile.Proxy.IPictureService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PictureServiceClient() : 
                base(PictureServiceClient.GetDefaultBinding(), PictureServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IPictureService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PictureServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(PictureServiceClient.GetBindingForEndpoint(endpointConfiguration), PictureServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PictureServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PictureServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PictureServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PictureServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PictureServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<bool> UploadAsync(UploadFile.Proxy.PictureFile picture) {
            return base.Channel.UploadAsync(picture);
        }
        
        public System.Threading.Tasks.Task<UploadFile.Proxy.PictureFile> DownloadAsync(string pictureName) {
            return base.Channel.DownloadAsync(pictureName);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPictureService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPictureService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:49487/PictureService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return PictureServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IPictureService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return PictureServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IPictureService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IPictureService,
        }
    }
}
